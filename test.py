from os import pathimport pygamefrom pygame.locals import *from pygame import mixerimport sysfrom src.func import get_data, clear_matrix, fill_matrix, clear_matrixF, reset_level, reset_dark, get_data_from_file, \    draw_textfrom src.WorldClass import World, cut_group, fire_group, exit_group, blob_group, key_group, bullet_groupfrom src.PlayerClass import Playerfrom src.ButtonClass import Buttonfrom src.DarkClass import Darkfrom src.ConfigSound import take_sound, fire, fall, game_over, sound_tracksound_track().play(-1)fall_fx = fall()take_fx = take_sound()fire_fx = fire()game_over_fx = game_over()# Настройка игрового цикла и кадров в секундуclock = pygame.time.Clock()fps = 60# Настройка размеров экранаscreen_width = 1100screen_height = 900# Получаем данные уровня из файлаworld_data = get_data('levels\\level1.txt')dark_data = get_data('levels\\dark1.txt')world = World(world_data)# Создаем объект мира на основе полученных данныdark = Dark(dark_data)start_img = pygame.image.load('img\\button\\startNotClick.png')start_img = pygame.transform.scale(start_img, (200, 100))exit_img = pygame.image.load('img\\button\\exitNotClick.png')exit_img = pygame.transform.scale(exit_img, (200, 100))restart_img = pygame.image.load('img\\button\\restartClick.png')restart_img = pygame.transform.scale(restart_img, (50, 50))player = Player(20, screen_height - 130)start_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)restart_button = Button(screen_width // 2 - 350, screen_height // 2, restart_img)# Создание окна игрыscreen = pygame.display.set_mode((screen_width, screen_height))pygame.display.set_caption('Platformer')# Определение цветовwhite = (255, 255, 255)# Загрузка изображений фонаbg_img = pygame.image.load('img\\phone.png')# Загрузка изображений кнопокtile_size = 16level = 2  #!!!  Уровень игры (заглушка)max_levels = 3 #!!! максимальное кол-во уровнейx = 0y = 0# Определение шрифтаfont = pygame.font.SysFont('Bauhaus 93', 70)main_menu = Truerun = Truedraw = Trueblink = Truedie = Falseanim = Truewin = Falsecounter = 0loader = pygame.transform.scale(pygame.image.load("img\\Level-1-m.png"), (180, 60))i = 0fire = Falsehave_key = False# Основной игровой циклwhile run:    clock.tick(fps)    # Отрисовка фона    screen.blit(bg_img, (0, 0))    key = pygame.key.get_pressed()    event = pygame.event.get()    if main_menu:        draw = True        anim = True        blink = True        fire_fx.stop()        i = 0        if player.game_over != -1:            if 202 <= pygame.mouse.get_pos()[0] <= 398 and 450 <= pygame.mouse.get_pos()[1] <= 545:                start_img = pygame.image.load('img\\button\\startClick.png')                start_img = pygame.transform.scale(start_img, (190, 95))                start_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)            else:                start_img = pygame.image.load('img\\button\\startNotClick.png')                start_img = pygame.transform.scale(start_img, (200, 100))                start_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)            if 700 <= pygame.mouse.get_pos()[0] <= 897 and 450 <= pygame.mouse.get_pos()[1] <= 550:                exit_img = pygame.image.load('img\\button\\exitClick.png')                exit_img = pygame.transform.scale(exit_img, (190, 95))                exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)            else:                exit_img = pygame.image.load('img\\button\\exitNotClick.png')                exit_img = pygame.transform.scale(exit_img, (200, 100))                exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)            if start_button.draw() or key[K_RETURN]:                player.game_over = 0                main_menu = False                win = False                dark_data = reset_dark(dark_data)        if exit_button.draw():            run = False        if player.game_over == -1:            if 202 <= pygame.mouse.get_pos()[0] <= 398 and 450 <= pygame.mouse.get_pos()[1] <= 545:                restart_img = pygame.image.load('img\\button\\restartClick.png')                restart_img = pygame.transform.scale(restart_img, (190, 95))                restart_button = Button(screen_width // 2 - 350, screen_height // 2, restart_img)            else:                restart_img = pygame.image.load('img\\button\\restartNotClick.png')                restart_img = pygame.transform.scale(restart_img, (200, 100))                restart_button = Button(screen_width // 2 - 350, screen_height // 2, restart_img)            if 700 <= pygame.mouse.get_pos()[0] <= 897 and 450 <= pygame.mouse.get_pos()[1] <= 550:                exit_img = pygame.image.load('img\\button\\exitClick.png')                exit_img = pygame.transform.scale(exit_img, (190, 95))                exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)            else:                exit_img = pygame.image.load('img\\button\\exitNotClick.png')                exit_img = pygame.transform.scale(exit_img, (200, 100))                exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)            if restart_button.draw() or key[K_RETURN]:                main_menu = False                world_data = []                level = 1                die = False                win = False                bullet_group.empty()                if path.exists(f'levels/dark{level}.txt'):  # !!! цифру меняем на {level}                    pickle_in = open(f'levels/dark{level}.txt', 'r')  # !!! цифру меняем на {level}                    dark_data = get_data_from_file(pickle_in)                dark_data = reset_dark(dark_data)                world = reset_level(level, player, screen_height)                player.reset(20, screen_height - 130)                fire = False                have_key = False                dark_data = reset_dark(dark_data)                player.game_over = 0    else:        if x != player.rect.x // 16 + 1 or player.rect.y // 16 + 1:            if not fire:                dark_data = fill_matrix(x, y, dark_data, 3, fire, have_key)                fire_fx.stop()            else:                dark_data = fill_matrix(x, y, dark_data, 7, fire, have_key)        if not fire:            dark_data, x, y = clear_matrix(player.rect.x // 16 + 1, player.rect.y // 16 + 1, dark_data, 3, 0)        else:            dark_data, x, y = clear_matrixF(player.rect.x // 16 + 1, player.rect.y // 16 + 1, dark_data, 6, 2, 3, have_key)        dark.update(dark_data, fire, have_key)        blob_group.draw(screen)        blob_group.update()        cut_group.draw(screen)        fire_group.draw(screen)        exit_group.draw(screen)        key_group.draw(screen)        bullet_group.draw(screen)        bullet_group.update()        world.draw()# Отрисовка игрового мира        dark.draw()        # отрисовка анимации старта        if draw:            counter += 1            if anim:                if i <= screen_height // 2 - 50:                    screen.blit(loader,                                (screen_width // 2 - 90, i))                    i += 15                else:                    anim = False            # отрисовка моргания            elif blink:                if not anim:                    screen.blit(loader,                                (screen_width // 2 - 90, screen_height // 2 - 50))            # выключение текста после 450 кадров            if counter >= 500:                draw = False                counter = 0        # моргание        if counter >= 360 and draw:            if 50 <= counter % 100 < 100:                blink = False            else:                blink = True        # Обновление состояния игрока        player.update(world, fire)        for e in event:            if e.type == pygame.KEYDOWN:                if e.key == pygame.K_ESCAPE:                    main_menu = True    if pygame.sprite.spritecollide(player, fire_group, True):        fire = True        take_fx[0].play()        take_fx[2].play()        fire_fx.play(-1)    if pygame.sprite.spritecollide(player, key_group, True):        take_fx[0].play()        take_fx[1].play()        have_key = True    if player.game_over == 1:        level += 1        if level <= max_levels:            # !!! Сброс уровня (даже если игрок только на него попал)            world_data = []            world = reset_level(level, player, screen_height)            player.game_over = 0            player.reset(20, screen_height - 130)            if path.exists(f'levels/dark{level}.txt'):  # !!! цифру меняем на {level}                pickle_in = open(f'levels/dark{level}.txt', 'r')  # !!! цифру меняем на {level}                dark_data = get_data_from_file(pickle_in)            dark_data = reset_dark(dark_data)            have_key = False        else:            level = 1            main_menu = True            win = True        if win:            draw_text('YOU WIN!', font, white,                      (screen_width // 2) - 140, screen_height // 2)    if player.game_over == -1:        main_menu = True        have_key = False        if not die:            game_over_fx.play()            die = True    # Обработка событий    for e in event:        if e.type == pygame.QUIT:            run = False    # Обновление экрана    pygame.display.update()# Завершение работы Pygamepygame.quit()
import pygamefrom pygame.locals import *from pygame import mixer# Инициализация Pygame и микшера для звуковpygame.init()# Настройка игрового цикла и кадров в секундуclock = pygame.time.Clock()fps = 60# Настройка размеров экранаscreen_width = 800screen_height = 800# Создание окна игрыscreen = pygame.display.set_mode((screen_width, screen_height))pygame.display.set_caption('Platformer')# Определение цветовwhite = (255, 255, 255)# Загрузка изображений фонаbg_img = pygame.image.load('img/sky.png')class Player:    """    Класс, представляющий игрока в платформере.    Атрибуты:    images_right (list): Список изображений для анимации игрока при движении вправо.    images_left (list): Список изображений для анимации игрока при движении влево.    index (int): Текущий индекс изображения для анимации.    counter (int): Счетчик для контроля частоты смены кадров анимации.    rect (pygame.Rect): Прямоугольник, определяющий размеры и положение игрока.    vel_y (int): Вертикальная скорость игрока.    jumped (bool): Флаг, указывающий, совершил ли игрок прыжок.    direction (int): Направление движения игрока (-1: влево, 1: вправо).    in_air (bool): Флаг, указывающий, находится ли игрок в воздухе.    """    def __init__(self, x, y):        """        Инициализирует(создает) объект игрока с заданными координатами.        Параметры:        x (int): Координата X начального положения игрока.        y (int): Координата Y начального положения игрока.        """        self.reset(x, y)    def update(self):        """        Обновляет состояние игрока, обрабатывает ввод с клавиатуры и перемещает игрока.        """        dx = 0        dy = 0        # Обработка нажатий клавиш для движения        key = pygame.key.get_pressed()        if key[pygame.K_LEFT]:            dx -= 5  # Движение влево            self.counter += 1            self.direction = -1  # Направление влево        if key[pygame.K_RIGHT]:            dx += 5  # Движение вправо            self.counter += 1            self.direction = 1  # Направление вправо        if not key[pygame.K_LEFT] and not key[pygame.K_RIGHT]:            self.counter = 0            self.index = 0            # Установка изображения в зависимости от направления            if self.direction == 1:                self.image = self.images_right[self.index]            if self.direction == -1:                self.image = self.images_left[self.index]        # Обновление координат игрока        self.rect.x += dx        self.rect.y += dy        # Отрисовка игрока на экране        screen.blit(self.image, self.rect)    def reset(self, x, y):        """        Сбрасывает состояние игрока к начальным параметрам.        Параметры:        x (int): Координата X начального положения игрока.        y (int): Координата Y начального положения игрока.        """        self.images_right = []        self.images_left = []        self.index = 0        self.counter = 0        # Загрузка изображений игрока для анимации движения        for num in range(1, 5):            img_right = pygame.image.load(f'img/guy{num}.png')            img_right = pygame.transform.scale(img_right, (40, 80))            img_left = pygame.transform.flip(img_right, True, False)            self.images_right.append(img_right)            self.images_left.append(img_left)        self.dead_image = pygame.image.load('img/ghost.png')        self.image = self.images_right[self.index]        self.rect = self.image.get_rect()        # Установка начальных координат и параметров игрока        self.rect.x = x        self.rect.y = y        self.width = self.image.get_width()        self.height = self.image.get_height()        self.vel_y = 0        self.jumped = False        self.direction = 0        self.in_air = True# Создание объекта игрокаplayer = Player(100, screen_height - 130)# Основной игровой циклrun = Truewhile run:    clock.tick(fps)    # Отрисовка фона    screen.blit(bg_img, (0, 0))    # Обновление состояния игрока    player.update()    # Обработка событий    for event in pygame.event.get():        if event.type == pygame.QUIT:            run = False    # Обновление экрана    pygame.display.update()# Завершение работы Pygamepygame.quit()
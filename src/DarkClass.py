import pygamefrom src.config_screen import screen_screen = screen_()tile_size = 16class Dark:    """    Класс для представления игрового мира.    """    def __init__(self, data):        """        Инициализация мира на основе данных.        Параметры:        data (list): Двумерный список, представляющий уровень игры.        """        self.tile_list = []  # Список тайлов в мире        # Загрузка изображений тайлов        dark_img = pygame.image.load('img\\dark.jpg')        fire_img = pygame.image.load('img\\fire.png')        fire_img2 = pygame.image.load('img\\fire3.png')        vision_img = pygame.image.load('img\\noFakel.png')        # Обход данных уровня и создание тайлов        row_count = 0        for row in data:            col_count = 0            for tile in row:                if tile == 0:                    img = pygame.transform.scale(vision_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 1:                    img = pygame.transform.scale(dark_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 2:                    img = pygame.transform.scale(fire_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 3 or tile == 4:                    img = pygame.transform.scale(fire_img2, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                col_count += 1            row_count += 1    def update(self, data, fire, have_key):        self.tile_list = []  # Список тайлов в мире        # Загрузка изображений тайлов        dark_img = pygame.image.load('img\\dark.jpg')        fire_img = pygame.image.load('img\\fire.png')        fire_img2 = pygame.image.load('img\\fire3.png')        vision_img = pygame.image.load('img\\noFakel.png')        # Обход данных уровня и создание тайлов        row_count = 0        for row in data:            col_count = 0            for tile in row:                if tile == 0:                    img = pygame.transform.scale(vision_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 1:                    img = pygame.transform.scale(dark_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 2:                    img = pygame.transform.scale(fire_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 3:                    img = pygame.transform.scale(fire_img2, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                elif tile == 4 and have_key:                    img = pygame.transform.scale(fire_img2, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                elif tile == 4 and not have_key:                    img = pygame.transform.scale(dark_img, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 6 and not fire:                    img = pygame.transform.scale(fire_img2, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                if tile == 7 and not have_key:                    img = pygame.transform.scale(fire_img2, (tile_size, tile_size))                    img_rect = img.get_rect()                    img_rect.x = col_count * tile_size                    img_rect.y = row_count * tile_size                    tile = (img, img_rect)                    self.tile_list.append(tile)                col_count += 1            row_count += 1    def draw(self):        """        Отрисовка всех тайлов мира на экране.        """        for tile in self.tile_list:            screen.blit(tile[0], tile[1])
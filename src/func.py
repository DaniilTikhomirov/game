import mathfrom os import pathfrom src.config_screen import screen_from src.WorldClass import World, cut_group, fire_group, exit_group, blob_group, key_groupscreen = screen_()def get_data_from_file(file):    """    Функция для чтения уровня игры из файла и преобразования его в двумерный список.    Параметры:    file (file object): Объект файла с данными уровня.    Возвращает:    list: Двумерный список с данными уровня.    """    world_data = []    for line in file:        row = list(map(int, line.strip().split(',')))        world_data.append(row)    return world_datadef draw_text(text, font, text_col, x, y):    """    Отображает текст на экране.    Параметры:    text (str): Текст для отображения.    font (pygame.font.Font): Шрифт для текста.    text_col (tuple): Цвет текста.    x (int): Координата X для текста.    y (int): Координата Y для текста.    """    img = font.render(text, True, text_col)    screen.blit(img, (x, y))def get_data(p):    if path.exists(p):  # Проверяем наличие файла с данными уровня        with open(p) as file:  # Открываем файл для чтения            world_data = get_data_from_file(file)        return world_datadef clear_matrix(x, y, matrix, n, blok):    for i in range(len(matrix)):        for j in range(len(matrix[0])):            if math.sqrt(abs(y - i) ** 2 + abs(x - j) ** 2) < n and matrix[i][j] != 4 and matrix[i][j] != 6:                matrix[i][j] = blok    return matrix, x, ydef fill_matrix(x, y, matrix, n, fire, key):    for i in range(len(matrix)):        for j in range(len(matrix[0])):            if math.sqrt(abs(y - i) ** 2 + abs(x - j) ** 2) < n and matrix[i][j] != 4:                if not fire and matrix[i][j] == 6:                    matrix[i][j] = 6                elif matrix[i][j] == 6 and fire:                    matrix[i][j] = 1                elif matrix[i][j] == 7 and not key:                    matrix[i][j] = 7                elif matrix[i][j] == 7 and key:                    matrix[i][j] = 1                else:                    matrix[i][j] = 1    return matrixdef clear_matrixF(x, y, matrix, n, blok, blok2, key):    for i in range(len(matrix)):        for j in range(len(matrix[0])):            if math.sqrt(abs(y - i) ** 2 + abs(x - j) ** 2) < n - 1 and matrix[i][j] != 4:                if matrix[i][j] == 7 and not key:                    matrix[i][j] = 7                else:                    matrix[i][j] = blok            elif math.sqrt(abs(y - i) ** 2 + abs(x - j) ** 2) < n and matrix[i][j] != 4:                if matrix[i][j] == 7 and not key:                    matrix[i][j] = 7                else:                    matrix[i][j] = blok2    return matrix, x, ydef reset_dark(matrix):    for i in range(len(matrix)):        for j in range(len(matrix[0])):            if matrix[i][j] in [0, 3, 2]:                matrix[i][j] = 1    return matrix# ---------------перезапуск уровня--------------------#def reset_level(level, player, screen_height):    player.reset(20, screen_height - 130)  # сбрасываем игрока в начальную позицию    cut_group.empty()  # очищаем группу монет    fire_group.empty()    key_group.empty()    blob_group.empty()    exit_group.empty()  # !!! очищаем группу выходов    # загружаем данные уровня и создаем мир    if path.exists(f'levels/level{level}.txt'):  # !!! цифру меняем на {level}        pickle_in = open(f'levels/level{level}.txt', 'r')  # !!! цифру меняем на {level}        # world_data = pickle.load(pickle_in)        world_data = get_data_from_file(pickle_in)  # получаем данные мира из файла    world = World(world_data)  # создаем мир на основе загруженных данных    return world  # возвращаем объект мира# -----------------------------------#